import java.util.*;

class Node {
    int data;
    Node left, right;
    
    Node(int data) {
        this.data = data;
        this.left = this.right = null;
    }
}

public class Main {

    public static void invertBinaryTree(Node root) {
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        boolean evenLevel = false;

        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Node> level = new ArrayList<>();

            for (int i = 0; i < size; i++) {
                Node current = queue.poll();
                level.add(current);

                if (current.left != null) {
                    queue.add(current.left);
                }

                if (current.right != null) {
                    queue.add(current.right);
                }
            }

            if (evenLevel) {
                int left = 0, right = level.size() - 1;

                while (left < right) {
                    int temp = level.get(left).data;
                    level.get(left).data = level.get(right).data;
                    level.get(right).data = temp;
                    left++;
                    right--;
                }
            }

            evenLevel = !evenLevel;
        }
    }

    public static void levelOrderTraversal(Node root) {
        if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            Node current = queue.poll();
            System.out.print(current.data + " ");

            if (current.left != null)
                queue.add(current.left);
            if (current.right != null)
                queue.add(current.right);
        }
    }

    public static void main(String[] args) {
        /*
         * Sample Tree:
         *         1
         *       /   \
         *      2     3
         *     / \   / \
         *    4   5 6   7
         */
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);

        System.out.println("Before inversion:");
        levelOrderTraversal(root);
        System.out.println();

        invertBinaryTree(root);

        System.out.println("After inversion of even levels:");
        levelOrderTraversal(root);
    }
}




import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
        this.left = this.right = null;
    }
}

public class CornerNodes {

    public static void print(Node root) {
        if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                Node current = queue.poll();

                // Print the leftmost (i == 0) or rightmost (i == size - 1) node of each level
                if (i == 0 || i == size - 1) {
                    System.out.print(current.data + " ");
                }

                if (current.left != null) {
                    queue.add(current.left);
                }

                if (current.right != null) {
                    queue.add(current.right);
                }
            }

            System.out.println();
        }
    }

    public static void main(String[] args) {
        /*
         * Sample Tree:
         *         1
         *       /   \
         *      2     3
         *     / \   / \
         *    4   5 6   7
         */
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);

        System.out.println("Corner nodes at each level:");
        print(root);
    }
}



import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
        this.left = this.right = null;
    }
}

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int rootNode = scanner.nextInt();
        Node root = new Node(rootNode);

        int rootLeft = scanner.nextInt();
        root.left = new Node(rootLeft);

        int rootRight = scanner.nextInt();
        root.right = new Node(rootRight);

        int rootLeftLeft = scanner.nextInt();
        root.left.left = new Node(rootLeftLeft);

        int rootLeftRight = scanner.nextInt();
        root.left.right = new Node(rootLeftRight);

        int rootRightLeft = scanner.nextInt();
        root.right.left = new Node(rootRightLeft);

        int rootRightRight = scanner.nextInt();
        root.right.right = new Node(rootRightRight);

        int rootLeftLeftLeft = scanner.nextInt();
        root.left.left.left = new Node(rootLeftLeftLeft);

        int rootLeftLeftRight = scanner.nextInt();
        root.left.left.right = new Node(rootLeftLeftRight);

        int rootLeftRightLeft = scanner.nextInt();
        root.left.right.left = new Node(rootLeftRightLeft);

        int rootLeftRightRight = scanner.nextInt();
        root.left.right.right = new Node(rootLeftRightRight);

        int rootRightLeftLeft = scanner.nextInt();
        root.right.left.left = new Node(rootRightLeftLeft);

        int rootRightLeftRight = scanner.nextInt();
        root.right.left.right = new Node(rootRightLeftRight);

        int rootRightRightLeft = scanner.nextInt();
        root.right.right.left = new Node(rootRightRightLeft);

        int rootRightRightRight = scanner.nextInt();
        root.right.right.right = new Node(rootRightRightRight);

        // Call functions after tree construction
        invertBinaryTree(root);
        levelOrderTraversal(root);
    }

    // You can copy the invertBinaryTree and levelOrderTraversal methods from earlier here
}







import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
        this.left = this.right = null;
    }
}

public class CornerNodes {

    public static void print(Node root) {
        if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                Node current = queue.poll();

                if (i == 0 || i == size - 1) {
                    System.out.print(current.data + " ");
                }

                if (current.left != null)
                    queue.add(current.left);

                if (current.right != null)
                    queue.add(current.right);
            }

            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int rootNode = sc.nextInt();
        Node root = new Node(rootNode);

        int left = sc.nextInt();
        root.left = new Node(left);

        int right = sc.nextInt();
        root.right = new Node(right);

        int leftLeft = sc.nextInt();
        root.left.left = new Node(leftLeft);

        int rightLeft = sc.nextInt();
        root.right.left = new Node(rightLeft);

        int rightRight = sc.nextInt();
        root.right.right = new Node(rightRight);

        int leftLeftLeft = sc.nextInt();
        root.left.left.left = new Node(leftLeftLeft);

        int rightLeftLeft = sc.nextInt();
        root.right.left.left = new Node(rightLeftLeft);

        int rightLeftRight = sc.nextInt();
        root.right.left.right = new Node(rightLeftRight);

        int rightRightRight = sc.nextInt();
        root.right.right.right = new Node(rightRightRight);

        print(root);

        sc.close();
    }
}
